"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trimStringPadding = exports.bufferToArray = exports.arrayEquals = exports.num16ToBuffer = exports.num32ToBuffer = exports.strToByteUint8Array = exports.strToByteArray = exports.val = exports.readPublicKey = exports.execute = exports.logTx = exports.CANDY_WRAPPER_PROGRAM_ID = void 0;
const web3_js_1 = require("@solana/web3.js");
const anchor_1 = require("@project-serum/anchor");
exports.CANDY_WRAPPER_PROGRAM_ID = new web3_js_1.PublicKey("WRAPYChf58WFCnyjXKJHtrPgzKXgHp6MD9aVDqJBbGh");
/// Wait for a transaction of a certain id to confirm and optionally log its messages
async function logTx(provider, txId, verbose = true) {
    await provider.connection.confirmTransaction(txId, "confirmed");
    if (verbose) {
        console.log((await provider.connection.getConfirmedTransaction(txId, "confirmed")).meta
            .logMessages);
    }
}
exports.logTx = logTx;
;
/// Execute a series of instructions in a txn
async function execute(provider, instructions, signers, skipPreflight = false, verbose = false) {
    let tx = new web3_js_1.Transaction();
    instructions.map((ix) => { tx = tx.add(ix); });
    let txid = null;
    try {
        txid = await provider.sendAndConfirm(tx, signers, {
            skipPreflight,
        });
    }
    catch (e) {
        console.log("Tx error!", e.logs);
        throw e;
    }
    if (!txid) {
        throw new Error("txid unexpectedly null!");
    }
    if (verbose) {
        console.log((await provider.connection.getConfirmedTransaction(txid, "confirmed")).meta
            .logMessages);
    }
    return txid;
}
exports.execute = execute;
/// Read in a public key from a BinaryReader
function readPublicKey(reader) {
    return new web3_js_1.PublicKey(reader.readFixedArray(32));
}
exports.readPublicKey = readPublicKey;
/// Extract the value of a Metaplex Bignum
function val(num) {
    if (anchor_1.BN.isBN(num)) {
        return num;
    }
    return new anchor_1.BN(num);
}
exports.val = val;
/// Convert a string to a byte array, stored as an array of numbers
function strToByteArray(str, padTo) {
    let buf = Buffer.from([...str].reduce((acc, c, ind) => acc.concat([str.charCodeAt(ind)]), []));
    if (padTo) {
        buf = Buffer.concat([buf], padTo);
    }
    return [...buf];
}
exports.strToByteArray = strToByteArray;
/// Convert a string to a byte array, stored in a Uint8Array
function strToByteUint8Array(str) {
    return Uint8Array.from([...str].reduce((acc, c, ind) => acc.concat([str.charCodeAt(ind)]), []));
}
exports.strToByteUint8Array = strToByteUint8Array;
/// Convert a 32 bit number to a buffer of bytes
function num32ToBuffer(num) {
    const isU32 = (num >= 0 && num < Math.pow(2, 32));
    if (!isU32) {
        throw new Error("Attempted to convert non 32 bit integer to byte array");
    }
    const b = Buffer.alloc(4);
    b.writeInt32LE(num);
    return b;
}
exports.num32ToBuffer = num32ToBuffer;
/// Convert a 16 bit number to a buffer of bytes
function num16ToBuffer(num) {
    const isU16 = (num >= 0 && num < Math.pow(2, 16));
    if (!isU16) {
        throw new Error("Attempted to convert non 16 bit integer to byte array");
    }
    const b = Buffer.alloc(2);
    b.writeUInt16LE(num);
    return b;
}
exports.num16ToBuffer = num16ToBuffer;
/// Check if two Array types contain the same values in order
function arrayEquals(a, b) {
    return Array.isArray(a) &&
        Array.isArray(b) &&
        a.length === b.length &&
        a.every((val, index) => val === b[index]);
}
exports.arrayEquals = arrayEquals;
/// Convert Buffer to Uint8Array
function bufferToArray(buffer) {
    const nums = [];
    for (let i = 0; i < buffer.length; i++) {
        nums.push(buffer[i]);
    }
    return nums;
}
exports.bufferToArray = bufferToArray;
/// Remove null characters from a string. Useful for comparring byte-padded on-chain strings with off-chain values
const trimStringPadding = (str) => {
    return str.replace(/\0/g, '');
};
exports.trimStringPadding = trimStringPadding;
//# sourceMappingURL=index.js.map