"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.identifySolanaAddress = exports.extractSolanaAddresses = exports.isSignatureAddress = exports.isPublicKeyAddress = exports.addressTypes = exports.isValidPublicKeyAddress = exports.isValidSolanaAddress = void 0;
const web3_js_1 = require("@solana/web3.js");
const captureSolanaAddressRx = /(\b[0-9a-zA-Z]{43,88})\b/g;
/**
 * Checks if a string is valid base58 Solana via a Regex.
 * @private
 */
function isValidSolanaAddress(address) {
    return /^[0-9a-zA-Z]{43,88}$/.test(address);
}
exports.isValidSolanaAddress = isValidSolanaAddress;
/**
 * Checks if a string is valid PublicKey address.
 * @private
 */
function isValidPublicKeyAddress(address) {
    if (!isValidSolanaAddress(address) || address.length > 44)
        return false;
    try {
        new web3_js_1.PublicKey(address);
        return true;
    }
    catch (_) {
        return false;
    }
}
exports.isValidPublicKeyAddress = isValidPublicKeyAddress;
exports.addressTypes = ['publicKey', 'signature'];
function isPublicKeyAddress(address) {
    return address.type === 'publicKey';
}
exports.isPublicKeyAddress = isPublicKeyAddress;
function isSignatureAddress(address) {
    return address.type === 'signature';
}
exports.isSignatureAddress = isSignatureAddress;
function extractSolanaAddresses(text) {
    var _a;
    const matches = (_a = text.match(captureSolanaAddressRx)) !== null && _a !== void 0 ? _a : [];
    return matches
        .slice(0)
        .map(identifySolanaAddress)
        .filter((x) => x != null);
}
exports.extractSolanaAddresses = extractSolanaAddresses;
function identifySolanaAddress(maybeAddress) {
    if (maybeAddress.length <= 44)
        return { type: 'publicKey', value: maybeAddress };
    if (maybeAddress.length >= 87)
        return { type: 'signature', value: maybeAddress };
    return null;
}
exports.identifySolanaAddress = identifySolanaAddress;
//# sourceMappingURL=address.js.map