import { Keypair } from '@solana/web3.js';
import { Message } from 'js-sha3';
/**
 * Derives a keypair from a message signed with the provided keypair.
 *
 * @param message - which is signed and then used to derive the seed digest
 */
export declare function deriveFromKeypair(keypair: Keypair, message: string): Keypair;
/**
 * Derives a keypair from a message signed with the provided wallet.
 *
 * @param message - which is signed and then used to derive the seed digest
 */
export declare function deriveFromWallet(wallet: {
    signMessage(message: Uint8Array): Promise<Uint8Array>;
}, message: string): Promise<Keypair>;
/**
 * Derives a keypair from a message.
 *
 * **WARN: only use this for testing purposes.**
 * Use {@link deriveFromWallet} or {@link deriveFromKeypair} instead in a production environment.
 *
 * This is entirely insecure as anyone with that same message can derive the same keypair.
 *
 * @param message - from wich the seed digest is derived
 */
export declare function deriveInsecure(message: Message): Keypair;
/**
 * Deserialization of the secretKey Uint8Array results in an object which we
 * this function adapts. Therefore use this to restore {@link Keypair}s that
 * were sent over the wire.
 *
 * @param secretKey hash with keys being array indices of the Uint8Array
 *
 * @returns array of keypair secret
 */
export declare function keypairSecretFromObject(secretKey: object): Uint8Array;
