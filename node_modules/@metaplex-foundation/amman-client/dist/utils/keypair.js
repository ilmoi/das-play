"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.keypairSecretFromObject = exports.deriveInsecure = exports.deriveFromWallet = exports.deriveFromKeypair = void 0;
const web3_js_1 = require("@solana/web3.js");
const js_sha3_1 = require("js-sha3");
const tweetnacl_1 = __importDefault(require("tweetnacl"));
/**
 * Derives a keypair from a message signed with the provided keypair.
 *
 * @param message - which is signed and then used to derive the seed digest
 */
function deriveFromKeypair(keypair, message) {
    const signedMessage = tweetnacl_1.default.sign.detached(Buffer.from(message), keypair.secretKey);
    return deriveInsecure(signedMessage);
}
exports.deriveFromKeypair = deriveFromKeypair;
/**
 * Derives a keypair from a message signed with the provided wallet.
 *
 * @param message - which is signed and then used to derive the seed digest
 */
async function deriveFromWallet(wallet, message) {
    const signedMessage = await wallet.signMessage(Buffer.from(message));
    return deriveInsecure(signedMessage);
}
exports.deriveFromWallet = deriveFromWallet;
/**
 * Derives a keypair from a message.
 *
 * **WARN: only use this for testing purposes.**
 * Use {@link deriveFromWallet} or {@link deriveFromKeypair} instead in a production environment.
 *
 * This is entirely insecure as anyone with that same message can derive the same keypair.
 *
 * @param message - from wich the seed digest is derived
 */
function deriveInsecure(message) {
    const hash = js_sha3_1.sha3_512.arrayBuffer(message);
    const digest = Buffer.from(hash.slice(0, 32));
    return web3_js_1.Keypair.fromSeed(digest);
}
exports.deriveInsecure = deriveInsecure;
/**
 * Deserialization of the secretKey Uint8Array results in an object which we
 * this function adapts. Therefore use this to restore {@link Keypair}s that
 * were sent over the wire.
 *
 * @param secretKey hash with keys being array indices of the Uint8Array
 *
 * @returns array of keypair secret
 */
function keypairSecretFromObject(secretKey) {
    return Uint8Array.from(Array.from(Object.values(secretKey)));
}
exports.keypairSecretFromObject = keypairSecretFromObject;
//# sourceMappingURL=keypair.js.map