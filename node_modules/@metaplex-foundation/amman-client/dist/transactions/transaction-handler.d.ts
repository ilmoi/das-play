import type { ErrorResolver } from '@metaplex-foundation/cusper';
import { ConfirmOptions, Connection, Keypair, Signer, Transaction } from '@solana/web3.js';
import { ConfirmedTransactionAssertablePromise } from './confirmed-transaction-assertable-promise';
import { TransactionHandler } from './types';
export declare type TransactionLabelMapper = (label: string) => string;
/**
 * A {@link TransactionHandler} backed by a payer {@link Keypair}.
 * @category transactions
 */
export declare class PayerTransactionHandler implements TransactionHandler {
    private readonly connection;
    private readonly payer;
    private readonly errorResolver?;
    private readonly transactionLabelMapper;
    /**
     * Creates a {@link PayerTransactionHandler}.
     *
     * @param connection to use to handle transactions
     * @param payer to use to sign transactions
     * @param errorResolver used to resolve a known error from the program logs
     */
    constructor(connection: Connection, payer: Keypair, errorResolver?: ErrorResolver | undefined, transactionLabelMapper?: TransactionLabelMapper);
    /**
     * Public key of the payer
     */
    get publicKey(): import("@solana/web3.js").PublicKey;
    /**
     * Sends and confirms the transaction {@link TransactionHandler['sendAndConfirmTransaction']}.
     */
    sendAndConfirmTransaction(transaction: Transaction, signers: Array<Signer>, optionsOrLabel?: ConfirmOptions | string, label?: string): ConfirmedTransactionAssertablePromise;
}
