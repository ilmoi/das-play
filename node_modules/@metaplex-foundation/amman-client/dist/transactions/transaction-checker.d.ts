import type { ErrorResolver } from '@metaplex-foundation/cusper';
import { Connection, TransactionResponse, TransactionSignature } from '@solana/web3.js';
import { Assert, AssertOpts } from '../asserts/asserts';
import { TransactionSummary } from './types';
/**
 * @property summary obtained to execute the assert
 * @property processed transaction obtained to execute the assert
 **/
export declare class TransactionCheckerAssertReturn {
    readonly txSummary: TransactionSummary;
    readonly txConfirmed: TransactionResponse;
    constructor(args: {
        txSummary: TransactionSummary;
        txConfirmed: TransactionResponse;
    });
    get logs(): string[];
    get loggedError(): import("@metaplex-foundation/cusper").MaybeErrorWithCode;
    get transactionMessage(): import("@solana/web3.js").Message;
}
/**
 * If you cannot use a builtin amman {@link TransactionHandler}, i.e. {@link PayerTransactionHandler}
 * then you can use this class to verify the outcome of your transactions.
 * @category transactions
 * @category asserts
 */
export declare class TransactionChecker {
    readonly connection: Connection;
    readonly errorResolver?: ErrorResolver | undefined;
    constructor(connection: Connection, errorResolver?: ErrorResolver | undefined);
    /**
     * Asserts that the transaction to completed successfully.
     *
     * @param msgRxs if provided it is verified that the logs match all these {@link RegExp}es
     * @category transactions
     * @category asserts
     */
    assertSuccess(t: Assert, txSignature: TransactionSignature, msgRxs?: RegExp[]): Promise<TransactionCheckerAssertReturn>;
    /**
     * Call this if you expect the sending and confirming the transaction to
     * return with a transaction error.
     *
     * @param errOrRx either the {@link Error} type expected to be raised or same as {@link msgRx}
     * @param msgRx if provided it is verified that the error string matches this {@link RegExp}
     * @category transactions
     * @category asserts
     */
    assertError<Err extends Function>(t: Assert, txSignature: TransactionSignature, errOrRx?: Err | RegExp, msgRx?: RegExp): Promise<TransactionCheckerAssertReturn>;
    /**
     * Call this if to assert that the log messages match a given set of regular expressions.
     * This does not check for success or failure of the transaction.
     *
     * @param msgRxs it is verified that the logs match all these {@link RegExp}es
     * @param opts options to customize the assertion diagnostics
     * @category transactions
     * @category asserts
     */
    assertLogs(t: Assert, txSignature: TransactionSignature, msgRxs: RegExp[], opts: AssertOpts): Promise<TransactionCheckerAssertReturn>;
}
/** @private */
export declare function fetchTransactionSummary(connection: Connection, txSignature: TransactionSignature, errorResolver?: ErrorResolver): Promise<{
    txSummary: TransactionSummary;
    txConfirmed: TransactionResponse;
}>;
