"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MutableAccount = void 0;
const web3_js_1 = require("@solana/web3.js");
const assert_1 = require("assert");
const consts_1 = require("../consts");
const log_1 = require("../utils/log");
const account_data_serializer_1 = require("./account-data-serializer");
const { logDebug, logTrace } = (0, log_1.scopedLog)('persist');
class MutableAccount {
    constructor(persist, pubkey, account, serializer) {
        this.persist = persist;
        this.pubkey = pubkey;
        this.serializer = serializer;
        this.pubkey = pubkey;
        this.lamports = account.lamports;
        this.data = account.data;
        this.owner = account.owner;
        this.executable = account.executable;
        this.rentEpoch = account.rentEpoch;
    }
    setOwner(owner) {
        logTrace('Updating owner of [%s] %s -> %s', this.owner, owner);
        this.owner = owner.toBase58();
        return this;
    }
    setLamports(lamports) {
        logTrace('Updating lamports of [%s] %d -> %d', this.pubkey, this.lamports, lamports);
        this.lamports = lamports;
        return this;
    }
    updateData(dataUpdate) {
        (0, assert_1.strict)(this.serializer != null, 'Account data mutator is not defined, but needed to update account data');
        const des = this.serializer.deserialize(this.data);
        const state = Array.isArray(des) ? des[0] : des;
        const updated = { ...state, ...dataUpdate };
        const ser = (0, account_data_serializer_1.serializeData)(this.serializer, updated);
        this.data = Array.isArray(ser) ? ser[0] : ser;
        logTrace('Updating data of [%s] to %O (%s)', this.pubkey, updated, this.data.toString('base64'));
        return this;
    }
    commit() {
        const accountInfo = this._toPersistedAccountInfo();
        logDebug('Persisting account', accountInfo.pubkey);
        logTrace(accountInfo);
        return this.persist(accountInfo);
    }
    _toPersistedAccountInfo() {
        return {
            pubkey: this.pubkey,
            account: {
                lamports: this.lamports,
                data: [this.data.toString('base64'), 'base64'],
                owner: this.owner,
                executable: this.executable,
                rentEpoch: this.rentEpoch,
            },
        };
    }
    /** @private */
    static async from(persist, address, dataMutator, connection = new web3_js_1.Connection(consts_1.LOCALHOST, 'confirmed')) {
        var _a;
        const accountInfo = await connection.getAccountInfo(address, 'confirmed');
        (0, assert_1.strict)(accountInfo != null, `Could not find account at '${address}' and thus cannot mutate it`);
        return new MutableAccount(persist, address.toBase58(), {
            lamports: accountInfo.lamports,
            data: accountInfo.data,
            owner: accountInfo.owner.toBase58(),
            rentEpoch: (_a = accountInfo.rentEpoch) !== null && _a !== void 0 ? _a : 0,
            executable: accountInfo.executable,
        }, dataMutator);
    }
}
exports.MutableAccount = MutableAccount;
//# sourceMappingURL=persistence.js.map