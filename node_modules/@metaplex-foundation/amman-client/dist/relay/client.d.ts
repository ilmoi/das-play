import { Keypair } from '@solana/web3.js';
import { PersistedAccountInfo } from '../assets/persistence';
import { RelayAccountState } from './types';
/** @private */
export declare type AmmanClient = {
    clearAddressLabels(): void;
    clearTransactions(): void;
    addAddressLabels(labels: Record<string, string>): Promise<void>;
    fetchAddressLabels(): Promise<Record<string, string>>;
    fetchAccountStates(address: string): Promise<RelayAccountState[]>;
    requestSnapshot(label?: string): Promise<string>;
    requestLoadSnapshot(label: string): Promise<void>;
    requestSaveAccount(address: string): Promise<string>;
    requestStoreKeypair(label: string, keypair: Keypair): Promise<void>;
    requestLoadKeypair(id: string): Promise<Keypair | undefined>;
    requestSetAccount(persistedAccountInfo: PersistedAccountInfo): Promise<void>;
    requestRestartValidator(): Promise<void>;
    requestKillAmman(): Promise<void>;
    disconnect(): void;
    destroy(): void;
};
export declare type AmmanClientOpts = {
    autoUnref?: boolean;
    ack?: boolean;
};
/** @private */
export declare class ConnectedAmmanClient implements AmmanClient {
    readonly url: string;
    private readonly socket;
    private readonly ack;
    private _reqId;
    private _verifiedAmmanVersion;
    private constructor();
    private connect;
    clearAddressLabels(): void;
    clearTransactions(): void;
    fetchAmmanVersion(): Promise<[number, number, number]>;
    fetchValidatorPid(): Promise<number>;
    requestKillAmman(): Promise<void>;
    addAddressLabels(labels: Record<string, string>): Promise<void>;
    fetchAddressLabels(): Promise<Record<string, string>>;
    fetchAccountStates(address: string): Promise<RelayAccountState[]>;
    requestSnapshot(label?: string): Promise<string>;
    requestLoadSnapshot(label: string): Promise<void>;
    requestSaveAccount(address: string): Promise<string>;
    requestStoreKeypair(id: string, keypair: Keypair): Promise<void>;
    requestLoadKeypair(id: string): Promise<Keypair | undefined>;
    requestSetAccount(persistedAccountInfo: PersistedAccountInfo): Promise<void>;
    requestRestartValidator(): Promise<void>;
    private _handleRequest;
    private _verifyAmmanVersion;
    /**
     * Disconnects this client and allows the app to shut down.
     * Only needed if you set `{ autoUnref: false }` for the opts.
     */
    disconnect(): void;
    /**
     * Disconnects this client preventing reconnects and allows the app to shut
     * down. Only needed if you set `{ autoUnref: false }` for the opts.
     */
    destroy(): void;
    private static _instance;
    static getInstance(url?: string, ammanClientOpts?: AmmanClientOpts): ConnectedAmmanClient;
}
/** @private */
export declare class DisconnectedAmmanClient implements AmmanClient {
    clearAddressLabels(): void;
    clearTransactions(): void;
    addAddressLabels(_labels: Record<string, string>): Promise<void>;
    fetchAddressLabels(): Promise<Record<string, string>>;
    fetchAccountStates(_address: string): Promise<RelayAccountState[]>;
    requestSnapshot(_label?: string): Promise<string>;
    requestLoadSnapshot(_label: string): Promise<void>;
    requestSaveAccount(_address: string): Promise<string>;
    requestStoreKeypair(_label: string, _keypair: Keypair): Promise<void>;
    requestLoadKeypair(_id: string): Promise<Keypair | undefined>;
    requestSetAccount(_persistedAccountInfo: PersistedAccountInfo): Promise<void>;
    requestRestartValidator(): Promise<void>;
    requestKillAmman(): Promise<void>;
    disconnect(): void;
    destroy(): void;
}
