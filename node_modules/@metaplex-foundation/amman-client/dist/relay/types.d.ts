import type { Diff } from 'deep-diff';
import type { Change } from 'diff';
export declare type RelayReply<T> = {
    result: T;
} | {
    err: string;
};
export declare function isReplyWithResult<T>(reply: RelayReply<T>): reply is {
    result: T;
};
export declare function isReplyWithError<T>(reply: RelayReply<T>): reply is {
    err: string;
};
export declare type AccountDiff = Array<Diff<Record<string, any>, Record<string, any>>>;
export declare type RelayAccountState = {
    account: Record<string, any>;
    accountDiff?: AccountDiff;
    slot: number;
    rendered?: string;
    renderedDiff?: Change[];
    timestamp: number;
};
export declare type AccountStatesResult = {
    pubkey: string;
    states: RelayAccountState[];
};
export declare type AccountSaveResult = {
    pubkey: string;
    accountPath: string;
};
export declare type SnapshotSaveResult = {
    snapshotDir: string;
};
export declare type AddressLabelsResult = {
    labels: Record<string, string>;
};
export declare type LoadKeypairResult = {
    id: string;
    keypair?: Uint8Array;
};
export declare type ValidatorPidResult = number;
export declare type AmmanVersion = [number, number, number];
export declare type VoidResult = {
    void: void;
};
export declare const VOID_REPLY: RelayReply<VoidResult>;
