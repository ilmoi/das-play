import { Connection, PublicKey, TransactionSignature } from '@solana/web3.js';
import BN from 'bn.js';
import { AddressLabels } from './address-labels';
/**
 * Interface to query token balances of a particular transaction.
 *
 * @category diagnostics
 */
export declare class TokenBalances {
    private readonly connection;
    private readonly signature;
    private readonly addressLabels?;
    private constructor();
    /**
     * Provides an interfact to query token balances for the transaction with the
     * provided {@link signature}.
     *
     * If {@link addressLabels} are provided then they are used to resolve
     * account and mint addresses to more meaningful labels.
     */
    static forTransaction(connection: Connection, signature: TransactionSignature, addressLabels?: AddressLabels): TokenBalances;
    /**
     * Gets token balance for the provided account and mint.
     */
    balance(account: PublicKey, mint: PublicKey): Promise<{
        amountPre: BN | number;
        amountPost: BN | number;
    } | null | undefined>;
    /**
     * Gets all token balances for the transaction mapped by account and then grouped
     * by mint.
     */
    byAccountMap(rawAddresses?: boolean): Promise<Map<string, Record<string, {
        amountPre: BN | number;
        amountPost: BN | number;
        rawMint: string;
    }>>>;
    /**
     * Dumps all token balances to the console.
     */
    dump(log?: Console['log'] & {
        enabled?: boolean;
    }): Promise<TokenBalances>;
    private resolveAccount;
}
