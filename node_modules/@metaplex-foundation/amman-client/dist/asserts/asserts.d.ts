import { TransactionResponse, TransactionSignature } from '@solana/web3.js';
import type { ConfirmedTransactionDetails, MaybeErrorWithCode, TransactionSummary } from '../transactions/types';
/**
 * The minimum methods that the first argument passed to assert functions like
 * {@link assertConfirmedTransaction} needs to have.
 *
 * @category asserts
 */
export declare type Assert = {
    equal(actual: any, expected: any, msg?: string): void;
    ok(value: any, msg?: string): void;
    fail(msg?: string): void;
    match(actual: string, expected: RegExp, msg?: string): void;
};
/**
 * Options to pass to asserts to allow providing more diagnostics.
 *
 * @property txLabel label of the transaction to include in the error message
 */
export declare type AssertOpts = {
    txLabel?: string;
    txSignature?: string;
};
/**
 * Asserts details about a confirmed transaction
 *
 * @deprecated use {@link assertTransactionSuccess} or {@link assertTransactionError} instead
 *
 * @param t
 * @param tx the confirmed transaction to verify
 * @param args specify what details should be verified
 * @category asserts
 */
export declare function assertConfirmedTransaction(t: Assert, tx: TransactionResponse, args?: {
    fee?: number;
}): void;
/**
 * Asserts details about a {@link TransactionSummary}.
 *
 * @deprecated use {@link assertTransactionSuccess} or {@link assertTransactionError} instead
 *
 * @param t
 * @param summary transaction summary to verify
 * @param args specify what details should be verified
 * @category asserts
 */
export declare function assertTransactionSummary(t: Assert, summary: TransactionSummary, args?: {
    fee?: number;
    msgRxs?: RegExp[];
    failed?: boolean;
}): void;
/**
 * Asserts that a transaction completed successfully and optionally checks for
 * messages in the transaction logs.
 *
 */
export declare function assertTransactionSuccess(t: Assert, details: Pick<ConfirmedTransactionDetails, 'txSummary'> & {
    txSignature?: TransactionSignature;
    txLabel?: string;
}, msgRxs?: RegExp[]): void;
/**
 * Asserts that the provided {@link ConfirmedTransactionDetails} has an error
 * that matches the provided requirements.
 *
 * Provide either an `Error` to {@link errOrRx} to verify the error type or a
 * {@link RegExp} to only verify the error message.
 * In order to verify both provide an `Error` to {@link errOrRx} and the {@link
 * RegExp} via {@link msgRx}.
 *
 * @param t
 * @param details result of executing a transaction
 * @param errOrRx the type of the error to expect or the {@link msgRx} to match
 * @param msgRx a {@link RegExp} that the error message is expected to match
 */
export declare function assertTransactionError<Err extends Function>(t: Assert, details: Pick<ConfirmedTransactionDetails, 'txSummary'> & {
    txSignature?: TransactionSignature;
    txLabel?: string;
}, errOrRx?: Err | RegExp, msgRx?: RegExp): void;
/**
 * Asserts that the provided error contains specific information as part of the
 * error message or the attached error logs.
 *
 * To check for they error type instead use {@link assertErrorMatches} instead.
 *
 * @param t
 * @param err error to verify
 * @param msgRxs list of {@link RegExp} which will be matched on the error _message_ or `err.logs`.
 * @param opts options to customize the assertion diagnostics
 * @category asserts
 */
export declare function assertError(t: Assert, err: Error, msgRxs: RegExp[], opts?: AssertOpts): void;
/**
 * Asserts that the provided logs contain specific messages.
 *
 * @param t
 * @param logs containing messages to match
 * @param msgRxs list of {@link RegExp} which will be matched on the {@link logs}.
 * @param opts options to customize the assertion diagnostics
 * @param label label of the container we check for messages to include in the error message
 * @category asserts
 * @private
 */
export declare function assertContainMessages(t: Assert, logs: string[], msgRxs: RegExp[], opts: AssertOpts, label?: string): void;
declare type AssertErrorMatchesOpts<Err> = {
    type?: Err;
    msgRx?: RegExp;
    txSignature?: string;
    logMessages?: string[];
};
/**
 * Asserts that the provided error is defined and matches the provided
 * requirements.
 *
 * If {@link opts.type} is provided the error needs to be of that type.
 * If {@link opts.msgRx} is provided the error message needs match to it.
 *
 * @param t
 * @param err error to verify
 * @param opts
 * @param opts.type the type of the error to expect
 * @param opts.msgRx a {@link RegExp} that the error message is expected to match
 * @param opts.logMessages list of log messages parse for an error in case that {@link err} is not defined
 */
export declare function assertErrorMatches<Err extends Function>(t: Assert, err: MaybeErrorWithCode, opts?: AssertErrorMatchesOpts<Err>): void;
export {};
